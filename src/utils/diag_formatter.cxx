/* Generated by re2c */
#include "diag_formatter.hxx"
#include "../options.hxx"

#include <cassert>

static size_t
parse_integer(const char* p_begin, const char* p_end)
{
    size_t value = 0;
    while (p_begin != p_end) {
        value *= 10;
        value += *p_begin++ - '0';
    }
    return value;
}

void
p_diag_format_msg(std::string& p_buffer, const char* p_msg, PDiagArgument* p_args, size_t p_arg_count)
{
    const char* cursor = p_msg;
    const char* marker;

    for (;;) {
        const char* saved_cursor = cursor;
        
{
    char yych;
    yych = *cursor;
    switch (yych) {
        case 0x00: goto yy1;
        case '%': goto yy4;
        case '<': goto yy5;
        case '{': goto yy6;
        default: goto yy2;
    }
yy1:
    ++cursor;
    {
                break;
            }
yy2:
    ++cursor;
yy3:
    {
                p_buffer.append(saved_cursor, cursor);
                continue;
            }
yy4:
    yych = *(marker = ++cursor);
    switch (yych) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9': goto yy7;
        case '>': goto yy9;
        default: goto yy3;
    }
yy5:
    yych = *++cursor;
    switch (yych) {
        case '%': goto yy10;
        default: goto yy3;
    }
yy6:
    yych = *(marker = ++cursor);
    switch (yych) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9': goto yy11;
        default: goto yy3;
    }
yy7:
    yych = *++cursor;
    switch (yych) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9': goto yy7;
        case 's': goto yy12;
        default: goto yy8;
    }
yy8:
    cursor = marker;
    goto yy3;
yy9:
    ++cursor;
    {
                p_buffer.push_back('\'');
                if (g_options.opt_diagnostics_color)
                    p_buffer.append("\x1b[0m");
                continue;
            }
yy10:
    ++cursor;
    {
                if (g_options.opt_diagnostics_color)
                    p_buffer.append("\x1b[1m");
                p_buffer.push_back('\'');
                continue;
            }
yy11:
    yych = *++cursor;
    switch (yych) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9': goto yy11;
        case '}': goto yy13;
        default: goto yy8;
    }
yy12:
    ++cursor;
    {
                int arg_idx = parse_integer(saved_cursor + 1, cursor - 1);
                assert(arg_idx < p_arg_count);
                assert(p_args[arg_idx].type == P_DAT_INT);
                if (p_args[arg_idx].value_int > 1) {
                    p_buffer.push_back('s');
                }

                continue;
            }
yy13:
    ++cursor;
    {
                int arg_idx = parse_integer(saved_cursor + 1, cursor - 1);
                assert(arg_idx < p_arg_count);
                PDiagArgument arg = p_args[arg_idx];
                p_diag_format_arg(p_buffer, &arg);
                continue;
            }
}

    }
}
