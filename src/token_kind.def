#ifndef TOKEN
#error macro TOKEN(kind) must be defined before including this file
#endif

#ifndef PUNCTUATION
#define PUNCTUATION(kind, spelling) TOKEN(kind)
#endif

#ifndef KEYWORD
#define KEYWORD(spelling) TOKEN(KEY_##spelling)
#endif

// Special tokens:
TOKEN(EOF) // End-Of-File
TOKEN(COMMENT) // Not generated unless if requested.
TOKEN(IDENTIFIER)

// Literals:
TOKEN(INT_LITERAL)
TOKEN(FLOAT_LITERAL)
TOKEN(STRING_LITERAL)

// Punctuation:
PUNCTUATION(LBRACE, "{")
PUNCTUATION(RBRACE, "}")
PUNCTUATION(LPAREN, "(")
PUNCTUATION(RPAREN, ")")
PUNCTUATION(LSQUARE, "[")
PUNCTUATION(RSQUARE, "]")
PUNCTUATION(COMMA, ",")
PUNCTUATION(COLON, ":")
PUNCTUATION(SEMI, ";")
PUNCTUATION(DOT, ".")
PUNCTUATION(ARROW, "->")
PUNCTUATION(EQUAL, "=")
PUNCTUATION(EQUAL_EQUAL, "==")
PUNCTUATION(LESS, "<")
PUNCTUATION(LESS_LESS, "<<")
PUNCTUATION(LESS_EQUAL, "<=")
PUNCTUATION(LESS_LESS_EQUAL, "<<=")
PUNCTUATION(GREATER, ">")
PUNCTUATION(GREATER_GREATER, ">>")
PUNCTUATION(GREATER_EQUAL, ">=")
PUNCTUATION(GREATER_GREATER_EQUAL, ">>=")
PUNCTUATION(EXCLAIM, "!")
PUNCTUATION(EXCLAIM_EQUAL, "!=")
PUNCTUATION(PLUS, "+")
PUNCTUATION(PLUS_EQUAL, "+=")
PUNCTUATION(MINUS, "-")
PUNCTUATION(MINUS_EQUAL, "-=")
PUNCTUATION(STAR, "*")
PUNCTUATION(STAR_EQUAL, "*=")
PUNCTUATION(SLASH, "/")
PUNCTUATION(SLASH_EQUAL, "/=")
PUNCTUATION(PERCENT, "%")
PUNCTUATION(PERCENT_EQUAL, "%=")
PUNCTUATION(CARET, "^")
PUNCTUATION(CARET_EQUAL, "^=")
PUNCTUATION(PIPE, "|")
PUNCTUATION(PIPE_PIPE, "||")
PUNCTUATION(PIPE_EQUAL, "|=")
PUNCTUATION(AMP, "&")
PUNCTUATION(AMP_AMP, "&&")
PUNCTUATION(AMP_EQUAL, "&=")

// Keywords:
KEYWORD(as)
KEYWORD(bool)
KEYWORD(break)
KEYWORD(char)
KEYWORD(continue)
KEYWORD(else)
KEYWORD(extern)
KEYWORD(f32)
KEYWORD(f64)
KEYWORD(false)
KEYWORD(fn)
KEYWORD(for)
KEYWORD(i16)
KEYWORD(i32)
KEYWORD(i64)
KEYWORD(i8)
KEYWORD(if)
KEYWORD(let)
KEYWORD(loop)
KEYWORD(return)
KEYWORD(struct)
KEYWORD(then)
KEYWORD(true)
KEYWORD(u16)
KEYWORD(u32)
KEYWORD(u64)
KEYWORD(u8)
KEYWORD(void)
KEYWORD(while)

#undef TOKEN
#undef PUNCTUATION
#undef KEYWORD
